import { GetObjectCommand, ListObjectsV2Command, S3Client } from '@aws-sdk/client-s3';
import dotenv from 'dotenv';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è R2
const r2Client = new S3Client({
  region: 'auto',
  endpoint: process.env.R2_ENDPOINT,
  credentials: {
    accessKeyId: process.env.R2_ACCESS_KEY_ID,
    secretAccessKey: process.env.R2_SECRET_ACCESS_KEY,
  },
});

const BUCKET_NAME = process.env.R2_BUCKET_NAME;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è JSON –∏–∑ R2
async function getJsonFromR2(key) {
  try {
    const command = new GetObjectCommand({
      Bucket: BUCKET_NAME,
      Key: key,
    });
    
    const response = await r2Client.send(command);
    const content = await response.Body.transformToString();
    return JSON.parse(content);
  } catch (error) {
    console.error(`Error getting ${key}:`, error);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫–ª–∏–µ–Ω—Ç–∞
async function listImages(clientId) {
  try {
    const command = new ListObjectsV2Command({
      Bucket: BUCKET_NAME,
      Prefix: `clients/${clientId}/images/`,
    });
    
    const response = await r2Client.send(command);
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤
    const images = (response.Contents || [])
      .map(item => {
        const match = item.Key.match(/images\/([^\/]+)$/);
        return match ? match[1] : null;
      })
      .filter(Boolean);
    
    return images;
  } catch (error) {
    console.error(`Error listing images for ${clientId}:`, error);
    return [];
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤
async function listClients() {
  try {
    const command = new ListObjectsV2Command({
      Bucket: BUCKET_NAME,
      Prefix: 'clients/',
      Delimiter: '/',
    });
    
    const response = await r2Client.send(command);
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º userId –∏–∑ CommonPrefixes
    const clientIds = (response.CommonPrefixes || [])
      .map(prefix => {
        const match = prefix.Prefix.match(/clients\/([^\/]+)\//);
        return match ? match[1] : null;
      })
      .filter(Boolean);
    
    return clientIds;
  } catch (error) {
    console.error('Error listing clients:', error);
    return [];
  }
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞
export default async function() {
  const specificClientId = process.env.CLIENT_ID;
  
  // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫–ª–∏–µ–Ω—Ç - –±–∏–ª–¥–∏–º —Ç–æ–ª—å–∫–æ –µ–≥–æ
  if (specificClientId) {
    console.log(`üéØ Building ONLY client: ${specificClientId}`);
    
    const config = await getJsonFromR2(`clients/${specificClientId}/data/config.json`);
    
    if (!config) {
      console.error(`‚ùå Config not found for client: ${specificClientId}`);
      return [];
    }
    
    const images = await listImages(specificClientId);
    
    console.log(`‚úÖ Loaded data for client: ${specificClientId}`);
    
    return [{
      id: specificClientId,
      ...config,
      images: images
    }];
  }
  
  // –ò–Ω–∞—á–µ –±–∏–ª–¥–∏–º –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
  console.log('üî® Loading ALL clients from R2...');
  
  const clientIds = await listClients();
  console.log(`Found ${clientIds.length} clients`);
  
  const clients = [];
  
  for (const clientId of clientIds) {
    console.log(`Loading data for client: ${clientId}`);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º config.json –∫–ª–∏–µ–Ω—Ç–∞
    const config = await getJsonFromR2(`clients/${clientId}/data/config.json`);
    
    if (config) {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      const images = await listImages(clientId);
      
      clients.push({
        id: clientId,
        ...config,
        images: images
      });
    }
  }
  
  console.log(`‚úÖ Loaded ${clients.length} client configurations`);
  
  return clients;
}

