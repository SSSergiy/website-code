name: Build and Deploy

on:
  push:
    branches:
      - main
  repository_dispatch:
    types: [content-updated]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    timeout-minutes: 10  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          ref: main
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit --no-fund --silent
        
      - name: Download content.json from R2
        if: github.event_name == 'repository_dispatch'
        env:
          R2_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
          R2_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
          R2_ENDPOINT: ${{ secrets.R2_ENDPOINT }}
          R2_BUCKET_NAME: ${{ secrets.R2_BUCKET_NAME }}
          USER_ID: ${{ github.event.client_payload.userId }}
        run: |
          if [ -n "$USER_ID" ]; then
            echo "üì• Downloading content.json from R2 for userId: $USER_ID"
            mkdir -p data
            npm install @aws-sdk/client-s3 --no-save --silent
            node -e "
              const { S3Client, GetObjectCommand } = require('@aws-sdk/client-s3');
              const fs = require('fs');
              const client = new S3Client({
                region: 'auto',
                endpoint: process.env.R2_ENDPOINT,
                credentials: {
                  accessKeyId: process.env.R2_ACCESS_KEY_ID,
                  secretAccessKey: process.env.R2_SECRET_ACCESS_KEY
                }
              });
              const command = new GetObjectCommand({
                Bucket: process.env.R2_BUCKET_NAME,
                Key: \`clients/\${process.env.USER_ID}/data/content.json\`
              });
              client.send(command).then(response => {
                return new Promise((resolve, reject) => {
                  const chunks = [];
                  response.Body.on('data', chunk => chunks.push(chunk));
                  response.Body.on('end', () => {
                    fs.writeFileSync('data/content.json', Buffer.concat(chunks));
                    console.log('‚úÖ content.json downloaded from R2');
                    resolve();
                  });
                  response.Body.on('error', reject);
                });
              }).catch(err => {
                console.error('‚ùå Failed to download from R2:', err.message);
                process.exit(1);
              });
            "
          else
            echo "‚ÑπÔ∏è No userId in payload, using content.json from repository"
          fi
      
      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v2
        with:
          hugo-version: '0.150.1'
          extended: true
        
      - name: Build Hugo site
        run: hugo --minify
        
      - name: Deploy to dev branch
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./public
          publish_branch: dev
          user_name: 'github-actions[bot]'
          user_email: 'github-actions[bot]@users.noreply.github.com'
          force_orphan: true
          disable_nojekyll: true
